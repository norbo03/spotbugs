/*
 * SpotBugs - Find bugs in Java programs
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

package edu.umd.cs.findbugs.detect.publicidentifiers;

import java.util.HashSet;
import java.util.Set;

/**
 * Utility class to load the public identifiers from N to R
 */
class LoadPublicIdentifiersNR {
    private static Set<String> PUBLIC_IDENTIFIERS = null;

    public static Set<String> getPublicIdentifiers() {
        if (PUBLIC_IDENTIFIERS == null) {
            PUBLIC_IDENTIFIERS = new HashSet<>();
            PUBLIC_IDENTIFIERS.add("Name");
            PUBLIC_IDENTIFIERS.add("Name$NameMapper");
            PUBLIC_IDENTIFIERS.add("Name$Table");
            PUBLIC_IDENTIFIERS.add("NameAlreadyBoundException");
            PUBLIC_IDENTIFIERS.add("NameCallback");
            PUBLIC_IDENTIFIERS.add("NameClassPair");
            PUBLIC_IDENTIFIERS.add("NameConstraintsExtension");
            PUBLIC_IDENTIFIERS.add("NamedAndTyped");
            PUBLIC_IDENTIFIERS.add("NamedEvent");
            PUBLIC_IDENTIFIERS.add("NamedFieldIdentifier");
            PUBLIC_IDENTIFIERS.add("NamedNodeMap");
            PUBLIC_IDENTIFIERS.add("NamedNodeMapImpl");
            PUBLIC_IDENTIFIERS.add("NamedObject");
            PUBLIC_IDENTIFIERS.add("NamedParameterSpec");
            PUBLIC_IDENTIFIERS.add("NameFilter");
            PUBLIC_IDENTIFIERS.add("NameList");
            PUBLIC_IDENTIFIERS.add("NameNotFoundException");
            PUBLIC_IDENTIFIERS.add("NameParser");
            PUBLIC_IDENTIFIERS.add("Names");
            PUBLIC_IDENTIFIERS.add("NameSignatureInstruction");
            PUBLIC_IDENTIFIERS.add("Namespace");
            PUBLIC_IDENTIFIERS.add("NameSpace");
            PUBLIC_IDENTIFIERS.add("NamespaceChangeListener");
            PUBLIC_IDENTIFIERS.add("NamespaceContext");
            PUBLIC_IDENTIFIERS.add("NamespaceContextWrapper");
            PUBLIC_IDENTIFIERS.add("NamespaceImpl");
            PUBLIC_IDENTIFIERS.add("NamespaceMappings");
            PUBLIC_IDENTIFIERS.add("NamespaceSupport");
            PUBLIC_IDENTIFIERS.add("NameSpaceSymbTable");
            PUBLIC_IDENTIFIERS.add("NamingEnumeration");
            PUBLIC_IDENTIFIERS.add("NamingEvent");
            PUBLIC_IDENTIFIERS.add("NamingException");
            PUBLIC_IDENTIFIERS.add("NamingExceptionEvent");
            PUBLIC_IDENTIFIERS.add("NamingListener");
            PUBLIC_IDENTIFIERS.add("NamingManager");
            PUBLIC_IDENTIFIERS.add("NamingManagerHelper");
            PUBLIC_IDENTIFIERS.add("NamingSecurityException");
            PUBLIC_IDENTIFIERS.add("NarrowKlassField");
            PUBLIC_IDENTIFIERS.add("NarrowOopField");
            PUBLIC_IDENTIFIERS.add("Native");
            PUBLIC_IDENTIFIERS.add("NativeEntryPoint");
            PUBLIC_IDENTIFIERS.add("NativeFont");
            PUBLIC_IDENTIFIERS.add("NativeGlyphMapper");
            PUBLIC_IDENTIFIERS.add("NativeImageReinitialize");
            PUBLIC_IDENTIFIERS.add("NativeLibrary");
            PUBLIC_IDENTIFIERS.add("NativeMemorySegmentImpl");
            PUBLIC_IDENTIFIERS.add("NativeMethodException");
            PUBLIC_IDENTIFIERS.add("NativeSignatureIterator");
            PUBLIC_IDENTIFIERS.add("NativeThread");
            PUBLIC_IDENTIFIERS.add("NavigableMap");
            PUBLIC_IDENTIFIERS.add("NavigableSet");
            PUBLIC_IDENTIFIERS.add("Navigation");
            PUBLIC_IDENTIFIERS.add("Navigation$SubNavLinks");
            PUBLIC_IDENTIFIERS.add("NavigationFilter");
            PUBLIC_IDENTIFIERS.add("NavigationFilter$FilterBypass");
            PUBLIC_IDENTIFIERS.add("NClob");
            PUBLIC_IDENTIFIERS.add("Neg");
            PUBLIC_IDENTIFIERS.add("NegativeArraySizeException");
            PUBLIC_IDENTIFIERS.add("NegotiateCallbackHandler");
            PUBLIC_IDENTIFIERS.add("Negotiator");
            PUBLIC_IDENTIFIERS.add("NegotiatorImpl");
            PUBLIC_IDENTIFIERS.add("NegTokenInit");
            PUBLIC_IDENTIFIERS.add("NegTokenTarg");
            PUBLIC_IDENTIFIERS.add("NestedClassWriter");
            PUBLIC_IDENTIFIERS.add("NestedClassWriterImpl");
            PUBLIC_IDENTIFIERS.add("NestHost_attribute");
            PUBLIC_IDENTIFIERS.add("NestMembers_attribute");
            PUBLIC_IDENTIFIERS.add("Net");
            PUBLIC_IDENTIFIERS.add("NetClient");
            PUBLIC_IDENTIFIERS.add("NetHooks$Provider");
            PUBLIC_IDENTIFIERS.add("NetProperties");
            PUBLIC_IDENTIFIERS.add("NetscapeCertTypeExtension");
            PUBLIC_IDENTIFIERS.add("NetworkChannel");
            PUBLIC_IDENTIFIERS.add("NetworkClient");
            PUBLIC_IDENTIFIERS.add("NEW");
            PUBLIC_IDENTIFIERS.add("NewAction");
            PUBLIC_IDENTIFIERS.add("NewAPIBuilder");
            PUBLIC_IDENTIFIERS.add("NewAPIListWriter");
            PUBLIC_IDENTIFIERS.add("NEWARRAY");
            PUBLIC_IDENTIFIERS.add("NewArrayTree");
            PUBLIC_IDENTIFIERS.add("NewClassTree");
            PUBLIC_IDENTIFIERS.add("NextAction");
            PUBLIC_IDENTIFIERS.add("NimbusLookAndFeel");
            PUBLIC_IDENTIFIERS.add("NMethod");
            PUBLIC_IDENTIFIERS.add("NMTOKENDatatypeValidator");
            PUBLIC_IDENTIFIERS.add("NoClassDefFoundError");
            PUBLIC_IDENTIFIERS.add("NoConnectionPendingException");
            PUBLIC_IDENTIFIERS.add("Node");
            PUBLIC_IDENTIFIERS.add("Node$Builder");
            PUBLIC_IDENTIFIERS.add("Node$Builder$OfDouble");
            PUBLIC_IDENTIFIERS.add("Node$Builder$OfInt");
            PUBLIC_IDENTIFIERS.add("Node$Builder$OfLong");
            PUBLIC_IDENTIFIERS.add("Node$OfDouble");
            PUBLIC_IDENTIFIERS.add("Node$OfInt");
            PUBLIC_IDENTIFIERS.add("Node$OfLong");
            PUBLIC_IDENTIFIERS.add("Node$OfPrimitive");
            PUBLIC_IDENTIFIERS.add("Node_Array");
            PUBLIC_IDENTIFIERS.add("NodeChangeEvent");
            PUBLIC_IDENTIFIERS.add("NodeChangeListener");
            PUBLIC_IDENTIFIERS.add("NodeConsumer");
            PUBLIC_IDENTIFIERS.add("NodeCounter");
            PUBLIC_IDENTIFIERS.add("NodeFilter");
            PUBLIC_IDENTIFIERS.add("NodeImpl");
            PUBLIC_IDENTIFIERS.add("NodeInfo");
            PUBLIC_IDENTIFIERS.add("NodeIterator");
            PUBLIC_IDENTIFIERS.add("NodeIteratorBase");
            PUBLIC_IDENTIFIERS.add("NodeIteratorImpl");
            PUBLIC_IDENTIFIERS.add("Node_List");
            PUBLIC_IDENTIFIERS.add("NodeList");
            PUBLIC_IDENTIFIERS.add("NodeLocator");
            PUBLIC_IDENTIFIERS.add("NodeSequence");
            PUBLIC_IDENTIFIERS.add("NodeSet");
            PUBLIC_IDENTIFIERS.add("NodeSetData");
            PUBLIC_IDENTIFIERS.add("NodeSetDTM");
            PUBLIC_IDENTIFIERS.add("NodeSortRecord");
            PUBLIC_IDENTIFIERS.add("NodeSortRecordFactory");
            PUBLIC_IDENTIFIERS.add("NodeTest");
            PUBLIC_IDENTIFIERS.add("NodeTestFilter");
            PUBLIC_IDENTIFIERS.add("NodeVector");
            PUBLIC_IDENTIFIERS.add("NoInitialContextException");
            PUBLIC_IDENTIFIERS.add("NonBaseLocaleDataMetaInfo");
            PUBLIC_IDENTIFIERS.add("NonBlocking");
            PUBLIC_IDENTIFIERS.add("NonBlockingInputStream");
            PUBLIC_IDENTIFIERS.add("NonBlockingInputStreamImpl");
            PUBLIC_IDENTIFIERS.add("NonBlockingPumpInputStream");
            PUBLIC_IDENTIFIERS.add("NonBlockingPumpReader");
            PUBLIC_IDENTIFIERS.add("NonBlockingReader");
            PUBLIC_IDENTIFIERS.add("NonBlockingReaderImpl");
            PUBLIC_IDENTIFIERS.add("Nonce");
            PUBLIC_IDENTIFIERS.add("NonConcreteMethodImpl");
            PUBLIC_IDENTIFIERS.add("NoninvertibleTransformException");
            PUBLIC_IDENTIFIERS.add("NonOptionArgumentSpec");
            PUBLIC_IDENTIFIERS.add("NonReadableChannelException");
            PUBLIC_IDENTIFIERS.add("NonValidatingConfiguration");
            PUBLIC_IDENTIFIERS.add("NonWritableChannelException");
            PUBLIC_IDENTIFIERS.add("NOP");
            PUBLIC_IDENTIFIERS.add("NoPermissionException");
            PUBLIC_IDENTIFIERS.add("NoPreview");
            PUBLIC_IDENTIFIERS.add("Norm2AllModes$Normalizer2WithImpl");
            PUBLIC_IDENTIFIERS.add("Normalizer2");
            PUBLIC_IDENTIFIERS.add("NormalizerBase$Mode");
            PUBLIC_IDENTIFIERS.add("NoRouteToHostException");
            PUBLIC_IDENTIFIERS.add("NoSuchAlgorithmException");
            PUBLIC_IDENTIFIERS.add("NoSuchAttributeException");
            PUBLIC_IDENTIFIERS.add("NoSuchDynamicMethodException");
            PUBLIC_IDENTIFIERS.add("NoSuchElementException");
            PUBLIC_IDENTIFIERS.add("NoSuchFieldError");
            PUBLIC_IDENTIFIERS.add("NoSuchFieldException");
            PUBLIC_IDENTIFIERS.add("NoSuchFileException");
            PUBLIC_IDENTIFIERS.add("NoSuchMechanismException");
            PUBLIC_IDENTIFIERS.add("NoSuchMethodError");
            PUBLIC_IDENTIFIERS.add("NoSuchMethodException");
            PUBLIC_IDENTIFIERS.add("NoSuchObjectException");
            PUBLIC_IDENTIFIERS.add("NoSuchPaddingException");
            PUBLIC_IDENTIFIERS.add("NoSuchProviderException");
            PUBLIC_IDENTIFIERS.add("NoSuchSymbolException");
            PUBLIC_IDENTIFIERS.add("NotActiveException");
            PUBLIC_IDENTIFIERS.add("Notation");
            PUBLIC_IDENTIFIERS.add("NOTATIONDatatypeValidator");
            PUBLIC_IDENTIFIERS.add("NotationDeclaration");
            PUBLIC_IDENTIFIERS.add("NotationDeclarationImpl");
            PUBLIC_IDENTIFIERS.add("NotationImpl");
            PUBLIC_IDENTIFIERS.add("NotBoundException");
            PUBLIC_IDENTIFIERS.add("NotCompliantMBeanException");
            PUBLIC_IDENTIFIERS.add("NotContextException");
            PUBLIC_IDENTIFIERS.add("NotDirectoryException");
            PUBLIC_IDENTIFIERS.add("NotEquals");
            PUBLIC_IDENTIFIERS.add("Notification");
            PUBLIC_IDENTIFIERS.add("NotificationAccessController");
            PUBLIC_IDENTIFIERS.add("NotificationBroadcaster");
            PUBLIC_IDENTIFIERS.add("NotificationBroadcasterSupport");
            PUBLIC_IDENTIFIERS.add("NotificationBuffer");
            PUBLIC_IDENTIFIERS.add("NotificationBufferFilter");
            PUBLIC_IDENTIFIERS.add("NotificationEmitter");
            PUBLIC_IDENTIFIERS.add("NotificationEmitterSupport");
            PUBLIC_IDENTIFIERS.add("NotificationFilter");
            PUBLIC_IDENTIFIERS.add("NotificationFilterSupport");
            PUBLIC_IDENTIFIERS.add("NotificationHandler");
            PUBLIC_IDENTIFIERS.add("NotificationListener");
            PUBLIC_IDENTIFIERS.add("NotificationResult");
            PUBLIC_IDENTIFIERS.add("NotificationThread");
            PUBLIC_IDENTIFIERS.add("NotImplementedException");
            PUBLIC_IDENTIFIERS.add("NotInHeapException");
            PUBLIC_IDENTIFIERS.add("NotLinkException");
            PUBLIC_IDENTIFIERS.add("NotSerializableException");
            PUBLIC_IDENTIFIERS.add("NotYetBoundException");
            PUBLIC_IDENTIFIERS.add("NotYetConnectedException");
            PUBLIC_IDENTIFIERS.add("NoType");
            PUBLIC_IDENTIFIERS.add("NSInfo");
            PUBLIC_IDENTIFIERS.add("NTDomainPrincipal");
            PUBLIC_IDENTIFIERS.add("NTLMAuthentication");
            PUBLIC_IDENTIFIERS.add("NTLMAuthenticationCallback");
            PUBLIC_IDENTIFIERS.add("NTLoginModule");
            PUBLIC_IDENTIFIERS.add("NTNumericCredential");
            PUBLIC_IDENTIFIERS.add("NTSid");
            PUBLIC_IDENTIFIERS.add("NTSidDomainPrincipal");
            PUBLIC_IDENTIFIERS.add("NTSidGroupPrincipal");
            PUBLIC_IDENTIFIERS.add("NTSidPrimaryGroupPrincipal");
            PUBLIC_IDENTIFIERS.add("NTSidUserPrincipal");
            PUBLIC_IDENTIFIERS.add("NTSystem");
            PUBLIC_IDENTIFIERS.add("NTUserPrincipal");
            PUBLIC_IDENTIFIERS.add("NullCipher");
            PUBLIC_IDENTIFIERS.add("NullComponentPeer");
            PUBLIC_IDENTIFIERS.add("NullEType");
            PUBLIC_IDENTIFIERS.add("NullPipe");
            PUBLIC_IDENTIFIERS.add("NullPointerException");
            PUBLIC_IDENTIFIERS.add("NullSurfaceData");
            PUBLIC_IDENTIFIERS.add("NullType");
            PUBLIC_IDENTIFIERS.add("Number");
            PUBLIC_IDENTIFIERS.add("NumberEditor");
            PUBLIC_IDENTIFIERS.add("NumberFormat");
            PUBLIC_IDENTIFIERS.add("NumberFormat$Field");
            PUBLIC_IDENTIFIERS.add("NumberFormatException");
            PUBLIC_IDENTIFIERS.add("NumberFormatProvider");
            PUBLIC_IDENTIFIERS.add("NumberFormatProviderImpl");
            PUBLIC_IDENTIFIERS.add("NumberFormatter");
            PUBLIC_IDENTIFIERS.add("NumberType");
            PUBLIC_IDENTIFIERS.add("NumericShaper$Range");
            PUBLIC_IDENTIFIERS.add("OAEPParameterSpec");
            PUBLIC_IDENTIFIERS.add("ObjArray");
            PUBLIC_IDENTIFIERS.add("ObjArrayKlass");
            PUBLIC_IDENTIFIERS.add("ObjDoubleConsumer");
            PUBLIC_IDENTIFIERS.add("Object");
            PUBLIC_IDENTIFIERS.add("ObjectChangeListener");
            PUBLIC_IDENTIFIERS.add("ObjectCollectedException");
            PUBLIC_IDENTIFIERS.add("ObjectContainer");
            PUBLIC_IDENTIFIERS.add("ObjectFactory");
            PUBLIC_IDENTIFIERS.add("ObjectFactoryBuilder");
            PUBLIC_IDENTIFIERS.add("ObjectHeap");
            PUBLIC_IDENTIFIERS.add("ObjectHeap$ObjectFilter");
            PUBLIC_IDENTIFIERS.add("ObjectHistogram");
            PUBLIC_IDENTIFIERS.add("ObjectHistogramElement");
            PUBLIC_IDENTIFIERS.add("ObjectHistogramPanel");
            PUBLIC_IDENTIFIERS.add("ObjectHistogramPanel$Listener");
            PUBLIC_IDENTIFIERS.add("ObjectInput");
            PUBLIC_IDENTIFIERS.add("ObjectInputFilter");
            PUBLIC_IDENTIFIERS.add("ObjectInputFilter$FilterInfo");
            PUBLIC_IDENTIFIERS.add("ObjectInputStream");
            PUBLIC_IDENTIFIERS.add("ObjectInputStream$GetField");
            PUBLIC_IDENTIFIERS.add("ObjectInputValidation");
            PUBLIC_IDENTIFIERS.add("ObjectInstance");
            PUBLIC_IDENTIFIERS.add("ObjectList");
            PUBLIC_IDENTIFIERS.add("ObjectListPanel");
            PUBLIC_IDENTIFIERS.add("ObjectMethods");
            PUBLIC_IDENTIFIERS.add("ObjectMonitor");
            PUBLIC_IDENTIFIERS.add("ObjectName");
            PUBLIC_IDENTIFIERS.add("ObjectOutput");
            PUBLIC_IDENTIFIERS.add("ObjectOutputStream");
            PUBLIC_IDENTIFIERS.add("ObjectOutputStream$PutField");
            PUBLIC_IDENTIFIERS.add("ObjectPool");
            PUBLIC_IDENTIFIERS.add("ObjectReader");
            PUBLIC_IDENTIFIERS.add("ObjectReader$FieldSetter");
            PUBLIC_IDENTIFIERS.add("ObjectReader$SignatureParser");
            PUBLIC_IDENTIFIERS.add("ObjectReference");
            PUBLIC_IDENTIFIERS.add("ObjectReferenceImpl");
            PUBLIC_IDENTIFIERS.add("ObjectReferenceImpl$Cache");
            PUBLIC_IDENTIFIERS.add("ObjectStack");
            PUBLIC_IDENTIFIERS.add("ObjectStreamConstants");
            PUBLIC_IDENTIFIERS.add("ObjectStreamException");
            PUBLIC_IDENTIFIERS.add("ObjectStreamField");
            PUBLIC_IDENTIFIERS.add("ObjectSynchronizer");
            PUBLIC_IDENTIFIERS.add("ObjectType");
            PUBLIC_IDENTIFIERS.add("ObjectValue");
            PUBLIC_IDENTIFIERS.add("ObjectVector");
            PUBLIC_IDENTIFIERS.add("ObjectView");
            PUBLIC_IDENTIFIERS.add("ObjectVisitor");
            PUBLIC_IDENTIFIERS.add("ObjIntConsumer");
            PUBLIC_IDENTIFIERS.add("ObjLongConsumer");
            PUBLIC_IDENTIFIERS.add("Observable");
            PUBLIC_IDENTIFIERS.add("Observer");
            PUBLIC_IDENTIFIERS.add("ObsoleteMethodImpl");
            PUBLIC_IDENTIFIERS.add("OceanTheme");
            PUBLIC_IDENTIFIERS.add("OCSP$RevocationStatus");
            PUBLIC_IDENTIFIERS.add("OCSPNoCheckExtension");
            PUBLIC_IDENTIFIERS.add("OctetStreamData");
            PUBLIC_IDENTIFIERS.add("OffScreenImage");
            PUBLIC_IDENTIFIERS.add("OffScreenImageSource");
            PUBLIC_IDENTIFIERS.add("OffsetClosure");
            PUBLIC_IDENTIFIERS.add("OffsetTableContigSpace");
            PUBLIC_IDENTIFIERS.add("OGLDrawImage");
            PUBLIC_IDENTIFIERS.add("OGLRenderQueue");
            PUBLIC_IDENTIFIERS.add("OGLSurfaceData");
            PUBLIC_IDENTIFIERS.add("OGLSurfaceDataProxy");
            PUBLIC_IDENTIFIERS.add("Oid");
            PUBLIC_IDENTIFIERS.add("OIDMap");
            PUBLIC_IDENTIFIERS.add("OIDName");
            PUBLIC_IDENTIFIERS.add("OkAction");
            PUBLIC_IDENTIFIERS.add("OkCancelButtonPanel");
            PUBLIC_IDENTIFIERS.add("OkCancelDialog");
            PUBLIC_IDENTIFIERS.add("OneStepIterator");
            PUBLIC_IDENTIFIERS.add("OneStepIteratorForward");
            PUBLIC_IDENTIFIERS.add("Oop");
            PUBLIC_IDENTIFIERS.add("OopField");
            PUBLIC_IDENTIFIERS.add("OopHandle");
            PUBLIC_IDENTIFIERS.add("OopMapCacheEntry");
            PUBLIC_IDENTIFIERS.add("OopMapStream");
            PUBLIC_IDENTIFIERS.add("OopMapValue");
            PUBLIC_IDENTIFIERS.add("OopMapValue$OopTypes");
            PUBLIC_IDENTIFIERS.add("OopMapVisitor");
            PUBLIC_IDENTIFIERS.add("OopPrinter");
            PUBLIC_IDENTIFIERS.add("OopStorage");
            PUBLIC_IDENTIFIERS.add("OopTreeNodeAdapter");
            PUBLIC_IDENTIFIERS.add("OopUtilities");
            PUBLIC_IDENTIFIERS.add("OopVisitor");
            PUBLIC_IDENTIFIERS.add("OpaqueFrameException");
            PUBLIC_IDENTIFIERS.add("Opcodes");
            PUBLIC_IDENTIFIERS.add("OpCodes");
            PUBLIC_IDENTIFIERS.add("OpenAction");
            PUBLIC_IDENTIFIERS.add("OpenDataException");
            PUBLIC_IDENTIFIERS.add("OpenFileInputStreamAction");
            PUBLIC_IDENTIFIERS.add("OpenFilesHandler");
            PUBLIC_IDENTIFIERS.add("OpeningHandshake");
            PUBLIC_IDENTIFIERS.add("OpenListResourceBundle");
            PUBLIC_IDENTIFIERS.add("OpenMBeanAttributeInfo");
            PUBLIC_IDENTIFIERS.add("OpenMBeanAttributeInfoSupport");
            PUBLIC_IDENTIFIERS.add("OpenMBeanConstructorInfo");
            PUBLIC_IDENTIFIERS.add("OpenMBeanConstructorInfoSupport");
            PUBLIC_IDENTIFIERS.add("OpenMBeanInfo");
            PUBLIC_IDENTIFIERS.add("OpenMBeanInfoSupport");
            PUBLIC_IDENTIFIERS.add("OpenMBeanOperationInfo");
            PUBLIC_IDENTIFIERS.add("OpenMBeanOperationInfoSupport");
            PUBLIC_IDENTIFIERS.add("OpenMBeanParameterInfo");
            PUBLIC_IDENTIFIERS.add("OpenMBeanParameterInfoSupport");
            PUBLIC_IDENTIFIERS.add("OpenOption");
            PUBLIC_IDENTIFIERS.add("OpensTree");
            PUBLIC_IDENTIFIERS.add("OpenType");
            PUBLIC_IDENTIFIERS.add("OpenURIHandler");
            PUBLIC_IDENTIFIERS.add("Operand");
            PUBLIC_IDENTIFIERS.add("OperatingSystemMXBean");
            PUBLIC_IDENTIFIERS.add("Operation");
            PUBLIC_IDENTIFIERS.add("OperationEntry");
            PUBLIC_IDENTIFIERS.add("OperationNotSupportedException");
            PUBLIC_IDENTIFIERS.add("OperationsException");
            PUBLIC_IDENTIFIERS.add("OperationTrackers$Trackable");
            PUBLIC_IDENTIFIERS.add("OperationTrackers$Tracker");
            PUBLIC_IDENTIFIERS.add("Operator");
            PUBLIC_IDENTIFIERS.add("Operators");
            PUBLIC_IDENTIFIERS.add("OpMap");
            PUBLIC_IDENTIFIERS.add("OpMapVector");
            PUBLIC_IDENTIFIERS.add("Option");
            PUBLIC_IDENTIFIERS.add("Option$InvalidValueException");
            PUBLIC_IDENTIFIERS.add("OptionalDataException");
            PUBLIC_IDENTIFIERS.add("OptionalHeader");
            PUBLIC_IDENTIFIERS.add("OptionalHeaderDataDirectories");
            PUBLIC_IDENTIFIERS.add("OptionalHeaderStandardFields");
            PUBLIC_IDENTIFIERS.add("OptionalHeaderWindowsSpecificFields");
            PUBLIC_IDENTIFIERS.add("OptionChecker");
            PUBLIC_IDENTIFIERS.add("OptionDeclarer");
            PUBLIC_IDENTIFIERS.add("OptionDescriptor");
            PUBLIC_IDENTIFIERS.add("OptionException");
            PUBLIC_IDENTIFIERS.add("OptionFinder");
            PUBLIC_IDENTIFIERS.add("OptionFormat");
            PUBLIC_IDENTIFIERS.add("OptionHelper");
            PUBLIC_IDENTIFIERS.add("OptionHelper$GrumpyHelper");
            PUBLIC_IDENTIFIERS.add("OptionLister");
            PUBLIC_IDENTIFIERS.add("OptionNameMap");
            PUBLIC_IDENTIFIERS.add("OptionOutputFormatter");
            PUBLIC_IDENTIFIERS.add("OptionPaneUI");
            PUBLIC_IDENTIFIERS.add("OptionParser");
            PUBLIC_IDENTIFIERS.add("Options");
            PUBLIC_IDENTIFIERS.add("OptionSet");
            PUBLIC_IDENTIFIERS.add("OptionSpec");
            PUBLIC_IDENTIFIERS.add("OptionSpecBuilder");
            PUBLIC_IDENTIFIERS.add("Or");
            PUBLIC_IDENTIFIERS.add("OrderClassLoaders");
            PUBLIC_IDENTIFIERS.add("OSEnvironment");
            PUBLIC_IDENTIFIERS.add("OSInfo");
            PUBLIC_IDENTIFIERS.add("OSInfo$WindowsVersion");
            PUBLIC_IDENTIFIERS.add("OSThread");
            PUBLIC_IDENTIFIERS.add("OSUtils");
            PUBLIC_IDENTIFIERS.add("OtherName");
            PUBLIC_IDENTIFIERS.add("OutgoingHeaders");
            PUBLIC_IDENTIFIERS.add("OutlineTextRenderer");
            PUBLIC_IDENTIFIERS.add("OutOfMemoryError");
            PUBLIC_IDENTIFIERS.add("OutputFormat");
            PUBLIC_IDENTIFIERS.add("OutputFormat$Defaults");
            PUBLIC_IDENTIFIERS.add("OutputFormat$DTD");
            PUBLIC_IDENTIFIERS.add("OutputFormatter");
            PUBLIC_IDENTIFIERS.add("OutputInt");
            PUBLIC_IDENTIFIERS.add("OutputKeys");
            PUBLIC_IDENTIFIERS.add("OutputStream");
            PUBLIC_IDENTIFIERS.add("OutputStreamImageOutputStreamSpi");
            PUBLIC_IDENTIFIERS.add("OutputStreamWriter");
            PUBLIC_IDENTIFIERS.add("OutputViewer");
            PUBLIC_IDENTIFIERS.add("OverlappingFileLockException");
            PUBLIC_IDENTIFIERS.add("OverlayLayout");
            PUBLIC_IDENTIFIERS.add("Override");
            PUBLIC_IDENTIFIERS.add("OverrideNativeWindowHandle");
            PUBLIC_IDENTIFIERS.add("OverviewElement");
            PUBLIC_IDENTIFIERS.add("ProcessBuilder");
            PUBLIC_IDENTIFIERS.add("ProcessBuilder.Redirect");
            PUBLIC_IDENTIFIERS.add("ProcessBuilder.Redirect.Type");
            PUBLIC_IDENTIFIERS.add("ProcessHandle.Info");
            PUBLIC_IDENTIFIERS.add("Package");
            PUBLIC_IDENTIFIERS.add("PackageElement");
            PUBLIC_IDENTIFIERS.add("PackageIndexWriter");
            PUBLIC_IDENTIFIERS.add("PackageNameFilter");
            PUBLIC_IDENTIFIERS.add("PackagerException");
            PUBLIC_IDENTIFIERS.add("PackageSummaryBuilder");
            PUBLIC_IDENTIFIERS.add("PackageSummaryWriter");
            PUBLIC_IDENTIFIERS.add("PackageTree");
            PUBLIC_IDENTIFIERS.add("PackageTreeWriter");
            PUBLIC_IDENTIFIERS.add("PackageUseWriter");
            PUBLIC_IDENTIFIERS.add("PackageWriterImpl");
            PUBLIC_IDENTIFIERS.add("PackedColorModel");
            PUBLIC_IDENTIFIERS.add("Packet");
            PUBLIC_IDENTIFIERS.add("PAData");
            PUBLIC_IDENTIFIERS.add("PAData$SaltAndParams");
            PUBLIC_IDENTIFIERS.add("PaddingLayout");
            PUBLIC_IDENTIFIERS.add("PAEncTSEnc");
            PUBLIC_IDENTIFIERS.add("PAForUserEnc");
            PUBLIC_IDENTIFIERS.add("Page");
            PUBLIC_IDENTIFIERS.add("Pageable");
            PUBLIC_IDENTIFIERS.add("PageableDoc");
            PUBLIC_IDENTIFIERS.add("PageCache");
            PUBLIC_IDENTIFIERS.add("PageFetcher");
            PUBLIC_IDENTIFIERS.add("PageFormat");
            PUBLIC_IDENTIFIERS.add("Paint");
            PUBLIC_IDENTIFIERS.add("Paint9Painter");
            PUBLIC_IDENTIFIERS.add("PaintContext");
            PUBLIC_IDENTIFIERS.add("Painter");
            PUBLIC_IDENTIFIERS.add("PaintEvent");
            PUBLIC_IDENTIFIERS.add("PaintEventDispatcher");
            PUBLIC_IDENTIFIERS.add("Pair");
            PUBLIC_IDENTIFIERS.add("PaletteBuilder");
            PUBLIC_IDENTIFIERS.add("PaletteBuilder$ColorNode");
            PUBLIC_IDENTIFIERS.add("Panel");
            PUBLIC_IDENTIFIERS.add("Panel$AccessibleAWTPanel");
            PUBLIC_IDENTIFIERS.add("PanelPeer");
            PUBLIC_IDENTIFIERS.add("PanelUI");
            PUBLIC_IDENTIFIERS.add("PaPacOptions");
            PUBLIC_IDENTIFIERS.add("Paper");
            PUBLIC_IDENTIFIERS.add("ParagraphView");
            PUBLIC_IDENTIFIERS.add("ParallelListResourceBundle");
            PUBLIC_IDENTIFIERS.add("ParallelogramPipe");
            PUBLIC_IDENTIFIERS.add("ParallelScavengeHeap");
            PUBLIC_IDENTIFIERS.add("Parameter");
            PUBLIC_IDENTIFIERS.add("ParameterAnnotationEntry");
            PUBLIC_IDENTIFIERS.add("ParameterAnnotations");
            PUBLIC_IDENTIFIERS.add("ParameterBlock");
            PUBLIC_IDENTIFIERS.add("ParameterDescriptor");
            PUBLIC_IDENTIFIERS.add("Parameterizable");
            PUBLIC_IDENTIFIERS.add("ParameterizedType");
            PUBLIC_IDENTIFIERS.add("ParameterizedTypeImpl");
            PUBLIC_IDENTIFIERS.add("ParameterizedTypeTree");
            PUBLIC_IDENTIFIERS.add("ParameterMetaData");
            PUBLIC_IDENTIFIERS.add("ParameterNameProvider");
            PUBLIC_IDENTIFIERS.add("ParameterNode");
            PUBLIC_IDENTIFIERS.add("ParametersMap");
            PUBLIC_IDENTIFIERS.add("ParametersTypeData");
            PUBLIC_IDENTIFIERS.add("ParamTaglet");
            PUBLIC_IDENTIFIERS.add("ParamTree");
            PUBLIC_IDENTIFIERS.add("ParenthesizedPatternTree");
            PUBLIC_IDENTIFIERS.add("ParenthesizedTree");
            PUBLIC_IDENTIFIERS.add("ParentNode");
            PUBLIC_IDENTIFIERS.add("ParsedLine");
            PUBLIC_IDENTIFIERS.add("ParseException");
            PUBLIC_IDENTIFIERS.add("ParsePosition");
            PUBLIC_IDENTIFIERS.add("Parser");
            PUBLIC_IDENTIFIERS.add("ParserAdapter");
            PUBLIC_IDENTIFIERS.add("ParserConfigurationException");
            PUBLIC_IDENTIFIERS.add("ParserConfigurationSettings");
            PUBLIC_IDENTIFIERS.add("ParserDelegator");
            PUBLIC_IDENTIFIERS.add("ParserException");
            PUBLIC_IDENTIFIERS.add("ParserFactory");
            PUBLIC_IDENTIFIERS.add("ParseStatus");
            PUBLIC_IDENTIFIERS.add("ParsingException");
            PUBLIC_IDENTIFIERS.add("PartialCompositeContext");
            PUBLIC_IDENTIFIERS.add("PartialCompositeDirContext");
            PUBLIC_IDENTIFIERS.add("PartialResultException");
            PUBLIC_IDENTIFIERS.add("ParticipatesInPreview");
            PUBLIC_IDENTIFIERS.add("Password");
            PUBLIC_IDENTIFIERS.add("PasswordCallback");
            PUBLIC_IDENTIFIERS.add("PasswordView");
            PUBLIC_IDENTIFIERS.add("Patch");
            PUBLIC_IDENTIFIERS.add("Path");
            PUBLIC_IDENTIFIERS.add("Path2D");
            PUBLIC_IDENTIFIERS.add("Path2D$Double");
            PUBLIC_IDENTIFIERS.add("Path2D$Float");
            PUBLIC_IDENTIFIERS.add("PathComponent");
            PUBLIC_IDENTIFIERS.add("PathConsumer2D");
            PUBLIC_IDENTIFIERS.add("PathConverter");
            PUBLIC_IDENTIFIERS.add("PathFileObject");
            PUBLIC_IDENTIFIERS.add("PathFileObject$CannotCreateUriError");
            PUBLIC_IDENTIFIERS.add("PathGraphics");
            PUBLIC_IDENTIFIERS.add("PathIterator");
            PUBLIC_IDENTIFIERS.add("PathList");
            PUBLIC_IDENTIFIERS.add("PathMatcher");
            PUBLIC_IDENTIFIERS.add("PathProperties");
            PUBLIC_IDENTIFIERS.add("PathResourcePoolEntry");
            PUBLIC_IDENTIFIERS.add("PathSearchingVirtualMachine");
            PUBLIC_IDENTIFIERS.add("Pattern");
            PUBLIC_IDENTIFIERS.add("PatternCaseLabelTree");
            PUBLIC_IDENTIFIERS.add("PatternSyntaxException");
            PUBLIC_IDENTIFIERS.add("PatternTree");
            PUBLIC_IDENTIFIERS.add("PBEKey");
            PUBLIC_IDENTIFIERS.add("PBEKeySpec");
            PUBLIC_IDENTIFIERS.add("PBEParameterSpec");
            PUBLIC_IDENTIFIERS.add("PCDesc");
            PUBLIC_IDENTIFIERS.add("PCK");
            PUBLIC_IDENTIFIERS.add("PCMM");
            PUBLIC_IDENTIFIERS.add("PDLOverrideSupported");
            PUBLIC_IDENTIFIERS.add("PeekGraphics");
            PUBLIC_IDENTIFIERS.add("PeekGraphics$ImageWaiter");
            PUBLIC_IDENTIFIERS.add("PeekMetrics");
            PUBLIC_IDENTIFIERS.add("PeerAddrChange");
            PUBLIC_IDENTIFIERS.add("PeerAddressChangeNotification");
            PUBLIC_IDENTIFIERS.add("PeerEvent");
            PUBLIC_IDENTIFIERS.add("Pem");
            PUBLIC_IDENTIFIERS.add("PendingException");
            PUBLIC_IDENTIFIERS.add("Percentage");
            PUBLIC_IDENTIFIERS.add("Perf$GetPerfAction");
            PUBLIC_IDENTIFIERS.add("PerfByteArrayCounter");
            PUBLIC_IDENTIFIERS.add("PerfByteArrayMonitor");
            PUBLIC_IDENTIFIERS.add("PerfCounter");
            PUBLIC_IDENTIFIERS.add("PerfDataBuffer");
            PUBLIC_IDENTIFIERS.add("PerfDataBufferImpl");
            PUBLIC_IDENTIFIERS.add("PerfDataBufferPrologue");
            PUBLIC_IDENTIFIERS.add("PerfDataEntry");
            PUBLIC_IDENTIFIERS.add("PerfDataFile");
            PUBLIC_IDENTIFIERS.add("PerfDataPrologue");
            PUBLIC_IDENTIFIERS.add("PerfectHashBuilder");
            PUBLIC_IDENTIFIERS.add("PerfectHashBuilder$Entry");
            PUBLIC_IDENTIFIERS.add("PerfInstrumentation");
            PUBLIC_IDENTIFIERS.add("PerfIntegerMonitor");
            PUBLIC_IDENTIFIERS.add("PerfLongArrayCounter");
            PUBLIC_IDENTIFIERS.add("PerfLongCounter");
            PUBLIC_IDENTIFIERS.add("PerfLongMonitor");
            PUBLIC_IDENTIFIERS.add("PerfMemory");
            PUBLIC_IDENTIFIERS.add("PerfMemory$PerfDataEntryVisitor");
            PUBLIC_IDENTIFIERS.add("PerformanceLogger");
            PUBLIC_IDENTIFIERS.add("PerfStringConstantMonitor");
            PUBLIC_IDENTIFIERS.add("PerfStringCounter");
            PUBLIC_IDENTIFIERS.add("PerfStringMonitor");
            PUBLIC_IDENTIFIERS.add("PerfStringVariableMonitor");
            PUBLIC_IDENTIFIERS.add("Period");
            PUBLIC_IDENTIFIERS.add("Permission");
            PUBLIC_IDENTIFIERS.add("PermissionCollection");
            PUBLIC_IDENTIFIERS.add("PermissionFactory");
            PUBLIC_IDENTIFIERS.add("PermittedSubclasses_attribute");
            PUBLIC_IDENTIFIERS.add("PersistenceDelegate");
            PUBLIC_IDENTIFIERS.add("PersistentMBean");
            PUBLIC_IDENTIFIERS.add("PersistentSnippet");
            PUBLIC_IDENTIFIERS.add("PGPData");
            PUBLIC_IDENTIFIERS.add("PhantomCleanable");
            PUBLIC_IDENTIFIERS.add("PhantomReference");
            PUBLIC_IDENTIFIERS.add("Phase");
            PUBLIC_IDENTIFIERS.add("PhaseCFG");
            PUBLIC_IDENTIFIERS.add("Phaser");
            PUBLIC_IDENTIFIERS.add("PhaseRegAlloc");
            PUBLIC_IDENTIFIERS.add("PhiNode");
            PUBLIC_IDENTIFIERS.add("PhysicalFont");
            PUBLIC_IDENTIFIERS.add("PhysicalStrike");
            PUBLIC_IDENTIFIERS.add("PingFrame");
            PUBLIC_IDENTIFIERS.add("Pipe");
            PUBLIC_IDENTIFIERS.add("Pipe$SinkChannel");
            PUBLIC_IDENTIFIERS.add("Pipe$SourceChannel");
            PUBLIC_IDENTIFIERS.add("PipedInputStream");
            PUBLIC_IDENTIFIERS.add("PipedOutputStream");
            PUBLIC_IDENTIFIERS.add("PipedReader");
            PUBLIC_IDENTIFIERS.add("PipedWriter");
            PUBLIC_IDENTIFIERS.add("PixelConverter");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Argb");
            PUBLIC_IDENTIFIERS.add("PixelConverter$ArgbBm");
            PUBLIC_IDENTIFIERS.add("PixelConverter$ArgbPre");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Bgrx");
            PUBLIC_IDENTIFIERS.add("PixelConverter$ByteGray");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Rgba");
            PUBLIC_IDENTIFIERS.add("PixelConverter$RgbaPre");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Rgbx");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Ushort4444Argb");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Ushort555Rgb");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Ushort555Rgbx");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Ushort565Rgb");
            PUBLIC_IDENTIFIERS.add("PixelConverter$UshortGray");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Xbgr");
            PUBLIC_IDENTIFIERS.add("PixelConverter$Xrgb");
            PUBLIC_IDENTIFIERS.add("PixelDrawPipe");
            PUBLIC_IDENTIFIERS.add("PixelFillPipe");
            PUBLIC_IDENTIFIERS.add("PixelGrabber");
            PUBLIC_IDENTIFIERS.add("PixelInterleavedSampleModel");
            PUBLIC_IDENTIFIERS.add("PixelToParallelogramConverter");
            PUBLIC_IDENTIFIERS.add("PixelToShapeConverter");
            PUBLIC_IDENTIFIERS.add("PKCS10");
            PUBLIC_IDENTIFIERS.add("PKCS10Attribute");
            PUBLIC_IDENTIFIERS.add("PKCS10Attributes");
            PUBLIC_IDENTIFIERS.add("PKCS11");
            PUBLIC_IDENTIFIERS.add("PKCS11Constants");
            PUBLIC_IDENTIFIERS.add("PKCS11Exception");
            PUBLIC_IDENTIFIERS.add("PKCS11RuntimeException");
            PUBLIC_IDENTIFIERS.add("PKCS7");
            PUBLIC_IDENTIFIERS.add("PKCS8EncodedKeySpec");
            PUBLIC_IDENTIFIERS.add("PKCS8Key");
            PUBLIC_IDENTIFIERS.add("PKCS9Attribute");
            PUBLIC_IDENTIFIERS.add("PKCS9Attributes");
            PUBLIC_IDENTIFIERS.add("PKIXBuilderParameters");
            PUBLIC_IDENTIFIERS.add("PKIXCertPathBuilderResult");
            PUBLIC_IDENTIFIERS.add("PKIXCertPathChecker");
            PUBLIC_IDENTIFIERS.add("PKIXCertPathValidatorResult");
            PUBLIC_IDENTIFIERS.add("PKIXExtendedParameters");
            PUBLIC_IDENTIFIERS.add("PKIXExtensions");
            PUBLIC_IDENTIFIERS.add("PKIXParameters");
            PUBLIC_IDENTIFIERS.add("PKIXRevocationChecker");
            PUBLIC_IDENTIFIERS.add("plain");
            PUBLIC_IDENTIFIERS.add("PlainDocument");
            PUBLIC_IDENTIFIERS.add("PlainTextInputStream");
            PUBLIC_IDENTIFIERS.add("PlainView");
            PUBLIC_IDENTIFIERS.add("PlatformDescription");
            PUBLIC_IDENTIFIERS.add("PlatformDescription$PluginInfo");
            PUBLIC_IDENTIFIERS.add("PlatformFont");
            PUBLIC_IDENTIFIERS.add("PlatformGraphicsInfo");
            PUBLIC_IDENTIFIERS.add("PlatformInfo");
            PUBLIC_IDENTIFIERS.add("PlatformKind");
            PUBLIC_IDENTIFIERS.add("PlatformKind$EnumKey");
            PUBLIC_IDENTIFIERS.add("PlatformKind$Key");
            PUBLIC_IDENTIFIERS.add("PlatformLogger");
            PUBLIC_IDENTIFIERS.add("PlatformLogger$Bridge");
            PUBLIC_IDENTIFIERS.add("PlatformLogger$ConfigurableBridge");
            PUBLIC_IDENTIFIERS.add("PlatformLogger$ConfigurableBridge$LoggerConfiguration");
            PUBLIC_IDENTIFIERS.add("PlatformLoggingMXBean");
            PUBLIC_IDENTIFIERS.add("PlatformManagedObject");
            PUBLIC_IDENTIFIERS.add("PlatformMBeanProvider");
            PUBLIC_IDENTIFIERS.add("PlatformMBeanProvider$PlatformComponent");
            PUBLIC_IDENTIFIERS.add("PlatformPrinterJobProxy");
            PUBLIC_IDENTIFIERS.add("PlatformProvider");
            PUBLIC_IDENTIFIERS.add("PlatformProvider$PlatformNotSupported");
            PUBLIC_IDENTIFIERS.add("PlatformSocketImpl");
            PUBLIC_IDENTIFIERS.add("PlatformSupport");
            PUBLIC_IDENTIFIERS.add("PlatformSupportImpl");
            PUBLIC_IDENTIFIERS.add("PlatformUtils");
            PUBLIC_IDENTIFIERS.add("Plotter");
            PUBLIC_IDENTIFIERS.add("Plotter$AccessiblePlotter");
            PUBLIC_IDENTIFIERS.add("PlotterPanel");
            PUBLIC_IDENTIFIERS.add("PlotterPanel$AccessiblePlotterPanel");
            PUBLIC_IDENTIFIERS.add("Plugin");
            PUBLIC_IDENTIFIERS.add("Plus");
            PUBLIC_IDENTIFIERS.add("PMap");
            PUBLIC_IDENTIFIERS.add("png");
            PUBLIC_IDENTIFIERS.add("PNGImageDecoder");
            PUBLIC_IDENTIFIERS.add("PNGImageDecoder$Chromaticities");
            PUBLIC_IDENTIFIERS.add("PNGImageDecoder$PNGException");
            PUBLIC_IDENTIFIERS.add("PNGImageReader");
            PUBLIC_IDENTIFIERS.add("PNGImageReaderSpi");
            PUBLIC_IDENTIFIERS.add("PNGImageWriterSpi");
            PUBLIC_IDENTIFIERS.add("PNGMetadata");
            PUBLIC_IDENTIFIERS.add("PNGMetadataFormat");
            PUBLIC_IDENTIFIERS.add("PNGMetadataFormatResources");
            PUBLIC_IDENTIFIERS.add("Point");
            PUBLIC_IDENTIFIERS.add("Point2D");
            PUBLIC_IDENTIFIERS.add("Point2D$Double");
            PUBLIC_IDENTIFIERS.add("Point2D$Float");
            PUBLIC_IDENTIFIERS.add("PointerFinder");
            PUBLIC_IDENTIFIERS.add("PointerLocation");
            PUBLIC_IDENTIFIERS.add("PointerType");
            PUBLIC_IDENTIFIERS.add("Policy");
            PUBLIC_IDENTIFIERS.add("Policy$Parameters");
            PUBLIC_IDENTIFIERS.add("PolicyConstraintsExtension");
            PUBLIC_IDENTIFIERS.add("PolicyFile");
            PUBLIC_IDENTIFIERS.add("PolicyInformation");
            PUBLIC_IDENTIFIERS.add("PolicyMappingsExtension");
            PUBLIC_IDENTIFIERS.add("PolicyNode");
            PUBLIC_IDENTIFIERS.add("PolicyParser");
            PUBLIC_IDENTIFIERS.add("PolicyParser$GrantEntry");
            PUBLIC_IDENTIFIERS.add("PolicyParser$ParsingException");
            PUBLIC_IDENTIFIERS.add("PolicyParser$PermissionEntry");
            PUBLIC_IDENTIFIERS.add("PolicyParser$PrincipalEntry");
            PUBLIC_IDENTIFIERS.add("PolicyQualifierInfo");
            PUBLIC_IDENTIFIERS.add("PolicySpi");
            PUBLIC_IDENTIFIERS.add("PolicyUtil");
            PUBLIC_IDENTIFIERS.add("Poller");
            PUBLIC_IDENTIFIERS.add("PollSelectorProvider");
            PUBLIC_IDENTIFIERS.add("Polygon");
            PUBLIC_IDENTIFIERS.add("PoolCallback");
            PUBLIC_IDENTIFIERS.add("PoolConstant");
            PUBLIC_IDENTIFIERS.add("PoolConstant$Dynamic");
            PUBLIC_IDENTIFIERS.add("PoolConstant$Dynamic$BsmKey");
            PUBLIC_IDENTIFIERS.add("PoolConstant$LoadableConstant");
            PUBLIC_IDENTIFIERS.add("PoolConstant$LoadableConstant$BasicConstant");
            PUBLIC_IDENTIFIERS.add("PooledConnection");
            PUBLIC_IDENTIFIERS.add("PooledConnectionBuilder");
            PUBLIC_IDENTIFIERS.add("PooledConnectionFactory");
            PUBLIC_IDENTIFIERS.add("PoolReader");
            PUBLIC_IDENTIFIERS.add("PoolWriter");
            PUBLIC_IDENTIFIERS.add("POP");
            PUBLIC_IDENTIFIERS.add("POP2");
            PUBLIC_IDENTIFIERS.add("PopInstruction");
            PUBLIC_IDENTIFIERS.add("Popup");
            PUBLIC_IDENTIFIERS.add("PopupFactory");
            PUBLIC_IDENTIFIERS.add("PopupMenu");
            PUBLIC_IDENTIFIERS.add("PopupMenu$AccessibleAWTPopupMenu");
            PUBLIC_IDENTIFIERS.add("PopupMenuEvent");
            PUBLIC_IDENTIFIERS.add("PopupMenuListener");
            PUBLIC_IDENTIFIERS.add("PopupMenuPeer");
            PUBLIC_IDENTIFIERS.add("PopupMenuUI");
            PUBLIC_IDENTIFIERS.add("Port");
            PUBLIC_IDENTIFIERS.add("Port$Info");
            PUBLIC_IDENTIFIERS.add("PortUnreachableException");
            PUBLIC_IDENTIFIERS.add("Position");
            PUBLIC_IDENTIFIERS.add("Position$LineMap");
            PUBLIC_IDENTIFIERS.add("Position$LineTabMapImpl");
            PUBLIC_IDENTIFIERS.add("PosixFileAttributes");
            PUBLIC_IDENTIFIERS.add("PosixFileAttributeView");
            PUBLIC_IDENTIFIERS.add("PosixPtyTerminal");
            PUBLIC_IDENTIFIERS.add("POSIXSignals");
            PUBLIC_IDENTIFIERS.add("PosixSysTerminal");
            PUBLIC_IDENTIFIERS.add("PosterOutputStream");
            PUBLIC_IDENTIFIERS.add("PostProcessor");
            PUBLIC_IDENTIFIERS.add("PostVMInitHook");
            PUBLIC_IDENTIFIERS.add("PPC64CurrentFrameGuess");
            PUBLIC_IDENTIFIERS.add("PPC64Frame");
            PUBLIC_IDENTIFIERS.add("PPC64JavaCallWrapper");
            PUBLIC_IDENTIFIERS.add("PPC64RegisterMap");
            PUBLIC_IDENTIFIERS.add("PPC64ThreadContext");
            PUBLIC_IDENTIFIERS.add("Preconditions");
            PUBLIC_IDENTIFIERS.add("Predicate");
            PUBLIC_IDENTIFIERS.add("PredicatedNodeTest");
            PUBLIC_IDENTIFIERS.add("PreferenceChangeEvent");
            PUBLIC_IDENTIFIERS.add("PreferenceChangeListener");
            PUBLIC_IDENTIFIERS.add("Preferences");
            PUBLIC_IDENTIFIERS.add("PreferencesFactory");
            PUBLIC_IDENTIFIERS.add("PreferencesHandler");
            PUBLIC_IDENTIFIERS.add("PrefixResolver");
            PUBLIC_IDENTIFIERS.add("PrefixResolverDefault");
            PUBLIC_IDENTIFIERS.add("PreHashedMap");
            PUBLIC_IDENTIFIERS.add("PreparedStatement");
            PUBLIC_IDENTIFIERS.add("Pretty");
            PUBLIC_IDENTIFIERS.add("Preview");
            PUBLIC_IDENTIFIERS.add("PreviewAPIListBuilder");
            PUBLIC_IDENTIFIERS.add("PreviewFeature");
            PUBLIC_IDENTIFIERS.add("PreviewFeature$JEP");
            PUBLIC_IDENTIFIERS.add("PreviewFeatures");
            PUBLIC_IDENTIFIERS.add("PreviewListWriter");
            PUBLIC_IDENTIFIERS.add("PrimitiveConstant");
            PUBLIC_IDENTIFIERS.add("PrimitiveIterator");
            PUBLIC_IDENTIFIERS.add("PrimitiveIterator$OfDouble");
            PUBLIC_IDENTIFIERS.add("PrimitiveIterator$OfInt");
            PUBLIC_IDENTIFIERS.add("PrimitiveIterator$OfLong");
            PUBLIC_IDENTIFIERS.add("PrimitiveType");
            PUBLIC_IDENTIFIERS.add("PrimitiveTypeTree");
            PUBLIC_IDENTIFIERS.add("PrimitiveValue");
            PUBLIC_IDENTIFIERS.add("PrimitiveValueImpl");
            PUBLIC_IDENTIFIERS.add("Principal");
            PUBLIC_IDENTIFIERS.add("PrincipalComparator");
            PUBLIC_IDENTIFIERS.add("PrincipalName");
            PUBLIC_IDENTIFIERS.add("Printable");
            PUBLIC_IDENTIFIERS.add("PrintAboveWriter");
            PUBLIC_IDENTIFIERS.add("PrintColorUIResource");
            PUBLIC_IDENTIFIERS.add("Printer");
            PUBLIC_IDENTIFIERS.add("PrinterAbortException");
            PUBLIC_IDENTIFIERS.add("PrinterException");
            PUBLIC_IDENTIFIERS.add("PrinterGraphics");
            PUBLIC_IDENTIFIERS.add("PrinterIOException");
            PUBLIC_IDENTIFIERS.add("PrinterJob");
            PUBLIC_IDENTIFIERS.add("PrinterJobWrapper");
            PUBLIC_IDENTIFIERS.add("PrinterStateReason");
            PUBLIC_IDENTIFIERS.add("PrintEvent");
            PUBLIC_IDENTIFIERS.add("PrintException");
            PUBLIC_IDENTIFIERS.add("PrintFilesHandler");
            PUBLIC_IDENTIFIERS.add("PrintGraphics");
            PUBLIC_IDENTIFIERS.add("PrintingProcessor");
            PUBLIC_IDENTIFIERS.add("PrintingProcessor$PrintingElementVisitor");
            PUBLIC_IDENTIFIERS.add("PrintingStatus");
            PUBLIC_IDENTIFIERS.add("PrintJob");
            PUBLIC_IDENTIFIERS.add("PrintJob2D");
            PUBLIC_IDENTIFIERS.add("PrintJobAdapter");
            PUBLIC_IDENTIFIERS.add("PrintJobAttribute");
            PUBLIC_IDENTIFIERS.add("PrintJobAttributeEvent");
            PUBLIC_IDENTIFIERS.add("PrintJobAttributeListener");
            PUBLIC_IDENTIFIERS.add("PrintJobAttributeSet");
            PUBLIC_IDENTIFIERS.add("PrintJobEvent");
            PUBLIC_IDENTIFIERS.add("PrintJobListener");
            PUBLIC_IDENTIFIERS.add("PrintQuality");
            PUBLIC_IDENTIFIERS.add("PrintRegionClosure");
            PUBLIC_IDENTIFIERS.add("PrintRequestAttribute");
            PUBLIC_IDENTIFIERS.add("PrintRequestAttributeSet");
            PUBLIC_IDENTIFIERS.add("PrintService");
            PUBLIC_IDENTIFIERS.add("PrintServiceAttribute");
            PUBLIC_IDENTIFIERS.add("PrintServiceAttributeEvent");
            PUBLIC_IDENTIFIERS.add("PrintServiceAttributeListener");
            PUBLIC_IDENTIFIERS.add("PrintServiceAttributeSet");
            PUBLIC_IDENTIFIERS.add("PrintServiceLookup");
            PUBLIC_IDENTIFIERS.add("PrintServiceLookupProvider");
            PUBLIC_IDENTIFIERS.add("PrintStream");
            PUBLIC_IDENTIFIERS.add("PrintStreamPrinter");
            PUBLIC_IDENTIFIERS.add("PrintWriter");
            PUBLIC_IDENTIFIERS.add("PriorityBlockingQueue");
            PUBLIC_IDENTIFIERS.add("PriorityFrame");
            PUBLIC_IDENTIFIERS.add("PriorityQueue");
            PUBLIC_IDENTIFIERS.add("PrivateAccess");
            PUBLIC_IDENTIFIERS.add("PrivateClassLoader");
            PUBLIC_IDENTIFIERS.add("PrivateKey");
            PUBLIC_IDENTIFIERS.add("PrivateKeyResolver");
            PUBLIC_IDENTIFIERS.add("PrivateKeyUsageExtension");
            PUBLIC_IDENTIFIERS.add("PrivateMLet");
            PUBLIC_IDENTIFIERS.add("PrivilegedAction");
            PUBLIC_IDENTIFIERS.add("PrivilegedActionException");
            PUBLIC_IDENTIFIERS.add("PrivilegedExceptionAction");
            PUBLIC_IDENTIFIERS.add("Process");
            PUBLIC_IDENTIFIERS.add("ProcessArgumentMatcher");
            PUBLIC_IDENTIFIERS.add("ProcessAttachingConnector");
            PUBLIC_IDENTIFIERS.add("ProcessBuilder$Redirect");
            PUBLIC_IDENTIFIERS.add("ProcessControl");
            PUBLIC_IDENTIFIERS.add("ProcessHandle");
            PUBLIC_IDENTIFIERS.add("ProcessHandle$Info");
            PUBLIC_IDENTIFIERS.add("ProcessInfo");
            PUBLIC_IDENTIFIERS.add("ProcessingEnvironment");
            PUBLIC_IDENTIFIERS.add("ProcessingInstruction");
            PUBLIC_IDENTIFIERS.add("ProcessingInstructionEvent");
            PUBLIC_IDENTIFIERS.add("ProcessingInstructionImpl");
            PUBLIC_IDENTIFIERS.add("ProcessListPanel");
            PUBLIC_IDENTIFIERS.add("Processor");
            PUBLIC_IDENTIFIERS.add("ProcessorVersion");
            PUBLIC_IDENTIFIERS.add("ProcessPath");
            PUBLIC_IDENTIFIERS.add("ProcessPath$DrawHandler");
            PUBLIC_IDENTIFIERS.add("ProcessPath$EndSubPathHandler");
            PUBLIC_IDENTIFIERS.add("ProcessPath$ProcessHandler");
            PUBLIC_IDENTIFIERS.add("ProcImageClassLoader");
            PUBLIC_IDENTIFIERS.add("Profile");
            PUBLIC_IDENTIFIERS.add("ProfileData");
            PUBLIC_IDENTIFIERS.add("ProfileDataException");
            PUBLIC_IDENTIFIERS.add("ProfileDataVerifier");
            PUBLIC_IDENTIFIERS.add("ProfilingInfo");
            PUBLIC_IDENTIFIERS.add("ProgressBarPanel");
            PUBLIC_IDENTIFIERS.add("ProgressBarUI");
            PUBLIC_IDENTIFIERS.add("ProgressiveHeapVisitor");
            PUBLIC_IDENTIFIERS.add("ProgressMonitor");
            PUBLIC_IDENTIFIERS.add("ProgressMonitor$AccessibleProgressMonitor");
            PUBLIC_IDENTIFIERS.add("ProgressMonitorInputStream");
            PUBLIC_IDENTIFIERS.add("ProjectivePoint");
            PUBLIC_IDENTIFIERS.add("ProjectivePoint$Immutable");
            PUBLIC_IDENTIFIERS.add("ProjectivePoint$Mutable");
            PUBLIC_IDENTIFIERS.add("ProjNode");
            PUBLIC_IDENTIFIERS.add("PropagatedException");
            PUBLIC_IDENTIFIERS.add("Properties");
            PUBLIC_IDENTIFIERS.add("PropertiesDefaultHandler");
            PUBLIC_IDENTIFIERS.add("PropertyBuilder");
            PUBLIC_IDENTIFIERS.add("PropertyChangeEvent");
            PUBLIC_IDENTIFIERS.add("PropertyChangeListener");
            PUBLIC_IDENTIFIERS.add("PropertyChangeListenerProxy");
            PUBLIC_IDENTIFIERS.add("PropertyChangeSupport");
            PUBLIC_IDENTIFIERS.add("PropertyDescriptor");
            PUBLIC_IDENTIFIERS.add("PropertyEditor");
            PUBLIC_IDENTIFIERS.add("PropertyEditorManager");
            PUBLIC_IDENTIFIERS.add("PropertyEditorSupport");
            PUBLIC_IDENTIFIERS.add("PropertyExpander");
            PUBLIC_IDENTIFIERS.add("PropertyExpander$ExpandException");
            PUBLIC_IDENTIFIERS.add("PropertyManager");
            PUBLIC_IDENTIFIERS.add("PropertyResourceBundle");
            PUBLIC_IDENTIFIERS.add("PropertyResourceBundleCharset");
            PUBLIC_IDENTIFIERS.add("PropertyState");
            PUBLIC_IDENTIFIERS.add("PropertyUtils");
            PUBLIC_IDENTIFIERS.add("PropertyVetoException");
            PUBLIC_IDENTIFIERS.add("PropertyWriter");
            PUBLIC_IDENTIFIERS.add("PropertyWriterImpl");
            PUBLIC_IDENTIFIERS.add("PropMwmHints");
            PUBLIC_IDENTIFIERS.add("ProtectionDomain");
            PUBLIC_IDENTIFIERS.add("ProtocolException");
            PUBLIC_IDENTIFIERS.add("ProtocolFamily");
            PUBLIC_IDENTIFIERS.add("Provider");
            PUBLIC_IDENTIFIERS.add("Provider$Service");
            PUBLIC_IDENTIFIERS.add("ProviderException");
            PUBLIC_IDENTIFIERS.add("ProviderMismatchException");
            PUBLIC_IDENTIFIERS.add("ProviderNotFoundException");
            PUBLIC_IDENTIFIERS.add("Providers");
            PUBLIC_IDENTIFIERS.add("ProvidesTree");
            PUBLIC_IDENTIFIERS.add("Proxy");
            PUBLIC_IDENTIFIERS.add("ProxyClient");
            PUBLIC_IDENTIFIERS.add("ProxyClient$Snapshot");
            PUBLIC_IDENTIFIERS.add("ProxyClient$SnapshotMBeanServerConnection");
            PUBLIC_IDENTIFIERS.add("ProxyGraphics");
            PUBLIC_IDENTIFIERS.add("ProxyGraphics2D");
            PUBLIC_IDENTIFIERS.add("ProxyPrintGraphics");
            PUBLIC_IDENTIFIERS.add("ProxyRef");
            PUBLIC_IDENTIFIERS.add("ProxySelector");
            PUBLIC_IDENTIFIERS.add("PSOldGen");
            PUBLIC_IDENTIFIERS.add("PSource");
            PUBLIC_IDENTIFIERS.add("PSPrinterJob");
            PUBLIC_IDENTIFIERS.add("PSPrinterJob$EPSPrinter");
            PUBLIC_IDENTIFIERS.add("PSPrinterJob$PluginPrinter");
            PUBLIC_IDENTIFIERS.add("PSSParameterSpec");
            PUBLIC_IDENTIFIERS.add("PSStreamPrinterFactory");
            PUBLIC_IDENTIFIERS.add("PSStreamPrintJob");
            PUBLIC_IDENTIFIERS.add("PSStreamPrintService");
            PUBLIC_IDENTIFIERS.add("PStack");
            PUBLIC_IDENTIFIERS.add("PsuedoNames");
            PUBLIC_IDENTIFIERS.add("PSVIAttrNSImpl");
            PUBLIC_IDENTIFIERS.add("PSVIDocumentImpl");
            PUBLIC_IDENTIFIERS.add("PSVIDOMImplementationImpl");
            PUBLIC_IDENTIFIERS.add("PSVIElementNSImpl");
            PUBLIC_IDENTIFIERS.add("PSVIProvider");
            PUBLIC_IDENTIFIERS.add("PSYoungGen");
            PUBLIC_IDENTIFIERS.add("Pty");
            PUBLIC_IDENTIFIERS.add("PublicKey");
            PUBLIC_IDENTIFIERS.add("PumpReader");
            PUBLIC_IDENTIFIERS.add("PushbackInputStream");
            PUBLIC_IDENTIFIERS.add("PushbackReader");
            PUBLIC_IDENTIFIERS.add("PushInstruction");
            PUBLIC_IDENTIFIERS.add("PushPromiseFrame");
            PUBLIC_IDENTIFIERS.add("PutAllAction");
            PUBLIC_IDENTIFIERS.add("PUTFIELD");
            PUBLIC_IDENTIFIERS.add("PUTSTATIC");
            PUBLIC_IDENTIFIERS.add("QName");
            PUBLIC_IDENTIFIERS.add("QNameDV");
            PUBLIC_IDENTIFIERS.add("QuadCurve2D");
            PUBLIC_IDENTIFIERS.add("QuadCurve2D$Double");
            PUBLIC_IDENTIFIERS.add("QuadCurve2D$Float");
            PUBLIC_IDENTIFIERS.add("QualifiedNameable");
            PUBLIC_IDENTIFIERS.add("Query");
            PUBLIC_IDENTIFIERS.add("QueryEval");
            PUBLIC_IDENTIFIERS.add("QueryExp");
            PUBLIC_IDENTIFIERS.add("Queue");
            PUBLIC_IDENTIFIERS.add("QuitHandler");
            PUBLIC_IDENTIFIERS.add("QuitResponse");
            PUBLIC_IDENTIFIERS.add("Quo");
            PUBLIC_IDENTIFIERS.add("RAFImageInputStreamSpi");
            PUBLIC_IDENTIFIERS.add("RAFImageOutputStreamSpi");
            PUBLIC_IDENTIFIERS.add("Random");
            PUBLIC_IDENTIFIERS.add("RandomAccess");
            PUBLIC_IDENTIFIERS.add("RandomAccessFile");
            PUBLIC_IDENTIFIERS.add("RandomAccessFileDataSource");
            PUBLIC_IDENTIFIERS.add("RandomGenerator");
            PUBLIC_IDENTIFIERS.add("RandomGenerator$ArbitrarilyJumpableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomGenerator$JumpableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomGenerator$LeapableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomGenerator$SplittableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomGenerator$StreamableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomSupport");
            PUBLIC_IDENTIFIERS.add("RandomSupport$AbstractArbitrarilyJumpableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$AbstractSpliteratorGenerator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$AbstractSplittableGenerator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$AbstractSplittableWithBrineGenerator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$RandomDoublesSpliterator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$RandomGeneratorProperties");
            PUBLIC_IDENTIFIERS.add("RandomSupport$RandomIntsSpliterator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$RandomLongsSpliterator");
            PUBLIC_IDENTIFIERS.add("RandomSupport$RandomSpliterator");
            PUBLIC_IDENTIFIERS.add("Range");
            PUBLIC_IDENTIFIERS.add("RangeException");
            PUBLIC_IDENTIFIERS.add("RangeExceptionImpl");
            PUBLIC_IDENTIFIERS.add("RangeImpl");
            PUBLIC_IDENTIFIERS.add("Raster");
            PUBLIC_IDENTIFIERS.add("RasterFormatException");
            PUBLIC_IDENTIFIERS.add("RasterOp");
            PUBLIC_IDENTIFIERS.add("RasterPrinterJob");
            PUBLIC_IDENTIFIERS.add("RawChannel");
            PUBLIC_IDENTIFIERS.add("RawChannel$Provider");
            PUBLIC_IDENTIFIERS.add("RawChannel$RawEvent");
            PUBLIC_IDENTIFIERS.add("RawChannelTube");
            PUBLIC_IDENTIFIERS.add("RawCharacterHandler");
            PUBLIC_IDENTIFIERS.add("RawCommandLineLauncher");
            PUBLIC_IDENTIFIERS.add("RawConstant");
            PUBLIC_IDENTIFIERS.add("RawHeapVisitor");
            PUBLIC_IDENTIFIERS.add("RawHtml");
            PUBLIC_IDENTIFIERS.add("RawOutputFormatter");
            PUBLIC_IDENTIFIERS.add("RBColor");
            PUBLIC_IDENTIFIERS.add("RBNode");
            PUBLIC_IDENTIFIERS.add("RBTree");
            PUBLIC_IDENTIFIERS.add("RC2Cipher");
            PUBLIC_IDENTIFIERS.add("RC2ParameterSpec");
            PUBLIC_IDENTIFIERS.add("RC5ParameterSpec");
            PUBLIC_IDENTIFIERS.add("Rdn");
            PUBLIC_IDENTIFIERS.add("RDN");
            PUBLIC_IDENTIFIERS.add("Readable");
            PUBLIC_IDENTIFIERS.add("ReadableByteChannel");
            PUBLIC_IDENTIFIERS.add("Reader");
            PUBLIC_IDENTIFIERS.add("ReaderUTF16");
            PUBLIC_IDENTIFIERS.add("ReaderUTF8");
            PUBLIC_IDENTIFIERS.add("ReaderUtil");
            PUBLIC_IDENTIFIERS.add("ReaderUtils");
            PUBLIC_IDENTIFIERS.add("ReadOnlyBufferException");
            PUBLIC_IDENTIFIERS.add("ReadOnlyFileSystemException");
            PUBLIC_IDENTIFIERS.add("ReadOnlyIterator");
            PUBLIC_IDENTIFIERS.add("ReadPendingException");
            PUBLIC_IDENTIFIERS.add("ReadResult");
            PUBLIC_IDENTIFIERS.add("ReadWriteLock");
            PUBLIC_IDENTIFIERS.add("Realm");
            PUBLIC_IDENTIFIERS.add("RealmCallback");
            PUBLIC_IDENTIFIERS.add("RealmChoiceCallback");
            PUBLIC_IDENTIFIERS.add("RealmException");
            PUBLIC_IDENTIFIERS.add("ReasonFlags");
            PUBLIC_IDENTIFIERS.add("Receiver");
            PUBLIC_IDENTIFIERS.add("ReceiverTypeData");
            PUBLIC_IDENTIFIERS.add("Record");
            PUBLIC_IDENTIFIERS.add("Record_attribute");
            PUBLIC_IDENTIFIERS.add("Record_attribute$ComponentInfo");
            PUBLIC_IDENTIFIERS.add("RecordComponentElement");
            PUBLIC_IDENTIFIERS.add("RecordComponentNode");
            PUBLIC_IDENTIFIERS.add("RecordComponentRemapper");
            PUBLIC_IDENTIFIERS.add("RecordComponentVisitor");
            PUBLIC_IDENTIFIERS.add("RecordedObject");
            PUBLIC_IDENTIFIERS.add("Rect");
            PUBLIC_IDENTIFIERS.add("Rectangle");
            PUBLIC_IDENTIFIERS.add("Rectangle2D");
            PUBLIC_IDENTIFIERS.add("Rectangle2D$Double");
            PUBLIC_IDENTIFIERS.add("Rectangle2D$Float");
            PUBLIC_IDENTIFIERS.add("RectangularShape");
            PUBLIC_IDENTIFIERS.add("RecursiveAction");
            PUBLIC_IDENTIFIERS.add("RecursiveTask");
            PUBLIC_IDENTIFIERS.add("ReentrantContext");
            PUBLIC_IDENTIFIERS.add("ReentrantContextProvider");
            PUBLIC_IDENTIFIERS.add("ReentrantContextProviderCLQ");
            PUBLIC_IDENTIFIERS.add("ReentrantContextProviderTL");
            PUBLIC_IDENTIFIERS.add("ReentrantLock");
            PUBLIC_IDENTIFIERS.add("ReentrantReadWriteLock");
            PUBLIC_IDENTIFIERS.add("ReentrantReadWriteLock$ReadLock");
            PUBLIC_IDENTIFIERS.add("ReentrantReadWriteLock$WriteLock");
            PUBLIC_IDENTIFIERS.add("Ref");
            PUBLIC_IDENTIFIERS.add("RefAddr");
            PUBLIC_IDENTIFIERS.add("Reference");
            PUBLIC_IDENTIFIERS.add("Referenceable");
            PUBLIC_IDENTIFIERS.add("ReferenceCountingDevice");
            PUBLIC_IDENTIFIERS.add("ReferenceData");
            PUBLIC_IDENTIFIERS.add("ReferenceFinder$Filter");
            PUBLIC_IDENTIFIERS.add("ReferenceFinder$Visitor");
            PUBLIC_IDENTIFIERS.add("ReferenceMap");
            PUBLIC_IDENTIFIERS.add("ReferenceNodeSetData");
            PUBLIC_IDENTIFIERS.add("ReferenceNotInitializedException");
            PUBLIC_IDENTIFIERS.add("ReferenceOctetStreamData");
            PUBLIC_IDENTIFIERS.add("ReferenceParser");
            PUBLIC_IDENTIFIERS.add("ReferenceParser$ParseException");
            PUBLIC_IDENTIFIERS.add("ReferenceParser$Reference");
            PUBLIC_IDENTIFIERS.add("ReferenceQueue");
            PUBLIC_IDENTIFIERS.add("ReferenceSubTreeData");
            PUBLIC_IDENTIFIERS.add("ReferenceTree");
            PUBLIC_IDENTIFIERS.add("ReferenceType");
            PUBLIC_IDENTIFIERS.add("ReferenceTypeImpl");
            PUBLIC_IDENTIFIERS.add("ReferenceUriSchemesSupported");
            PUBLIC_IDENTIFIERS.add("ReferenceWrapper");
            PUBLIC_IDENTIFIERS.add("ReferralException");
            PUBLIC_IDENTIFIERS.add("Reflection");
            PUBLIC_IDENTIFIERS.add("ReflectionException");
            PUBLIC_IDENTIFIERS.add("ReflectionFactory");
            PUBLIC_IDENTIFIERS.add("ReflectiveOperationException");
            PUBLIC_IDENTIFIERS.add("Refreshable");
            PUBLIC_IDENTIFIERS.add("RefreshFailedException");
            PUBLIC_IDENTIFIERS.add("RefType");
            PUBLIC_IDENTIFIERS.add("RegexMatcher");
            PUBLIC_IDENTIFIERS.add("Region");
            PUBLIC_IDENTIFIERS.add("RegionClipSpanIterator");
            PUBLIC_IDENTIFIERS.add("RegionIterator");
            PUBLIC_IDENTIFIERS.add("RegionNode");
            PUBLIC_IDENTIFIERS.add("RegionSpanIterator");
            PUBLIC_IDENTIFIERS.add("Register");
            PUBLIC_IDENTIFIERS.add("Register$RegisterCategory");
            PUBLIC_IDENTIFIERS.add("RegisterableService");
            PUBLIC_IDENTIFIERS.add("RegisterAttributes");
            PUBLIC_IDENTIFIERS.add("RegisterConfig");
            PUBLIC_IDENTIFIERS.add("Registered");
            PUBLIC_IDENTIFIERS.add("RegisteredDomain");
            PUBLIC_IDENTIFIERS.add("RegisterMap");
            PUBLIC_IDENTIFIERS.add("Registry");
            PUBLIC_IDENTIFIERS.add("RegistryContext");
            PUBLIC_IDENTIFIERS.add("RegistryContextFactory");
            PUBLIC_IDENTIFIERS.add("RegistryHandler");
            PUBLIC_IDENTIFIERS.add("RegistryImpl");
            PUBLIC_IDENTIFIERS.add("RegularExpression");
            PUBLIC_IDENTIFIERS.add("Reifier");
            PUBLIC_IDENTIFIERS.add("RejectedExecutionException");
            PUBLIC_IDENTIFIERS.add("RejectedExecutionHandler");
            PUBLIC_IDENTIFIERS.add("Relation");
            PUBLIC_IDENTIFIERS.add("Relational");
            PUBLIC_IDENTIFIERS.add("RelationException");
            PUBLIC_IDENTIFIERS.add("RelationNotFoundException");
            PUBLIC_IDENTIFIERS.add("RelationNotification");
            PUBLIC_IDENTIFIERS.add("RelationService");
            PUBLIC_IDENTIFIERS.add("RelationServiceMBean");
            PUBLIC_IDENTIFIERS.add("RelationServiceNotRegisteredException");
            PUBLIC_IDENTIFIERS.add("RelationSupport");
            PUBLIC_IDENTIFIERS.add("RelationSupportMBean");
            PUBLIC_IDENTIFIERS.add("RelationType");
            PUBLIC_IDENTIFIERS.add("RelationTypeNotFoundException");
            PUBLIC_IDENTIFIERS.add("RelationTypeSupport");
            PUBLIC_IDENTIFIERS.add("RelativePath");
            PUBLIC_IDENTIFIERS.add("RelativePath$RelativeDirectory");
            PUBLIC_IDENTIFIERS.add("RelativePath$RelativeFile");
            PUBLIC_IDENTIFIERS.add("ReliableLog");
            PUBLIC_IDENTIFIERS.add("ReliableLog$LogFile");
            PUBLIC_IDENTIFIERS.add("RelinkableCallSite");
            PUBLIC_IDENTIFIERS.add("Remapper");
            PUBLIC_IDENTIFIERS.add("RemappingAnnotationAdapter");
            PUBLIC_IDENTIFIERS.add("RemappingMethodAdapter");
            PUBLIC_IDENTIFIERS.add("Remote");
            PUBLIC_IDENTIFIERS.add("RemoteAARCH64Thread");
            PUBLIC_IDENTIFIERS.add("RemoteAARCH64ThreadContext");
            PUBLIC_IDENTIFIERS.add("RemoteAARCH64ThreadFactory");
            PUBLIC_IDENTIFIERS.add("RemoteAMD64Thread");
            PUBLIC_IDENTIFIERS.add("RemoteAMD64ThreadContext");
            PUBLIC_IDENTIFIERS.add("RemoteAMD64ThreadFactory");
            PUBLIC_IDENTIFIERS.add("RemoteCall");
            PUBLIC_IDENTIFIERS.add("RemoteDebugger");
            PUBLIC_IDENTIFIERS.add("RemoteDebuggerClient");
            PUBLIC_IDENTIFIERS.add("RemoteDebuggerServer");
            PUBLIC_IDENTIFIERS.add("RemoteException");
            PUBLIC_IDENTIFIERS.add("RemoteExecutionControl");
            PUBLIC_IDENTIFIERS.add("RemoteHost");
            PUBLIC_IDENTIFIERS.add("RemoteHostImpl");
            PUBLIC_IDENTIFIERS.add("RemoteMonitoredVm");
            PUBLIC_IDENTIFIERS.add("RemoteObject");
            PUBLIC_IDENTIFIERS.add("RemoteObjectInvocationHandler");
            PUBLIC_IDENTIFIERS.add("RemotePPC64Thread");
            PUBLIC_IDENTIFIERS.add("RemotePPC64ThreadContext");
            PUBLIC_IDENTIFIERS.add("RemotePPC64ThreadFactory");
            PUBLIC_IDENTIFIERS.add("RemoteRef");
            PUBLIC_IDENTIFIERS.add("RemoteReference");
            PUBLIC_IDENTIFIERS.add("RemoteRISCV64Thread");
            PUBLIC_IDENTIFIERS.add("RemoteRISCV64ThreadContext");
            PUBLIC_IDENTIFIERS.add("RemoteRISCV64ThreadFactory");
            PUBLIC_IDENTIFIERS.add("RemoteServer");
            PUBLIC_IDENTIFIERS.add("RemoteStub");
            PUBLIC_IDENTIFIERS.add("RemoteThread");
            PUBLIC_IDENTIFIERS.add("RemoteThreadFactory");
            PUBLIC_IDENTIFIERS.add("RemoteVm");
            PUBLIC_IDENTIFIERS.add("RemoteVmImpl");
            PUBLIC_IDENTIFIERS.add("RemoteVmManager");
            PUBLIC_IDENTIFIERS.add("RemoteX86Thread");
            PUBLIC_IDENTIFIERS.add("RemoteX86ThreadContext");
            PUBLIC_IDENTIFIERS.add("RemoteX86ThreadFactory");
            PUBLIC_IDENTIFIERS.add("RenderableImage");
            PUBLIC_IDENTIFIERS.add("RenderableImageOp");
            PUBLIC_IDENTIFIERS.add("RenderableImageProducer");
            PUBLIC_IDENTIFIERS.add("RenderBuffer");
            PUBLIC_IDENTIFIERS.add("RenderContext");
            PUBLIC_IDENTIFIERS.add("RenderedImage");
            PUBLIC_IDENTIFIERS.add("RenderedImageFactory");
            PUBLIC_IDENTIFIERS.add("Renderer");
            PUBLIC_IDENTIFIERS.add("RenderingEngine");
            PUBLIC_IDENTIFIERS.add("RenderingHints");
            PUBLIC_IDENTIFIERS.add("RenderingHints$Key");
            PUBLIC_IDENTIFIERS.add("RenderLoops");
            PUBLIC_IDENTIFIERS.add("RenderQueue");
            PUBLIC_IDENTIFIERS.add("RepaintArea");
            PUBLIC_IDENTIFIERS.add("RepaintManager");
            PUBLIC_IDENTIFIERS.add("Repeatable");
            PUBLIC_IDENTIFIERS.add("Replaceable");
            PUBLIC_IDENTIFIERS.add("ReplaceableString");
            PUBLIC_IDENTIFIERS.add("ReplaceableUCharacterIterator");
            PUBLIC_IDENTIFIERS.add("ReplayCache");
            PUBLIC_IDENTIFIERS.add("ReplicateScaleFilter");
            PUBLIC_IDENTIFIERS.add("Reporter");
            PUBLIC_IDENTIFIERS.add("Repository");
            PUBLIC_IDENTIFIERS.add("Repository$RegistrationContext");
            PUBLIC_IDENTIFIERS.add("Request");
            PUBLIC_IDENTIFIERS.add("RequestFocusController");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$ByteArrayPublisher");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$EmptyPublisher");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$FilePublisher");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$InputStreamPublisher");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$IterablePublisher");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$StreamIterator");
            PUBLIC_IDENTIFIERS.add("RequestPublishers$StringPublisher");
            PUBLIC_IDENTIFIERS.add("RequiredModelMBean");
            PUBLIC_IDENTIFIERS.add("RequiresTree");
            PUBLIC_IDENTIFIERS.add("RescaleOp");
            PUBLIC_IDENTIFIERS.add("ReservedStackAccess");
            PUBLIC_IDENTIFIERS.add("ResetFrame");
            PUBLIC_IDENTIFIERS.add("ResolutionException");
            PUBLIC_IDENTIFIERS.add("ResolutionSyntax");
            PUBLIC_IDENTIFIERS.add("Resolve");
            PUBLIC_IDENTIFIERS.add("Resolve$InapplicableMethodException");
            PUBLIC_IDENTIFIERS.add("Resolve$RecoveryLoadClass");
            PUBLIC_IDENTIFIERS.add("ResolvedJavaField");
            PUBLIC_IDENTIFIERS.add("ResolvedJavaMethod");
            PUBLIC_IDENTIFIERS.add("ResolvedJavaMethod$Parameter");
            PUBLIC_IDENTIFIERS.add("ResolvedJavaType");
            PUBLIC_IDENTIFIERS.add("ResolveListener");
            PUBLIC_IDENTIFIERS.add("Resolver");
            PUBLIC_IDENTIFIERS.add("ResolverAnonymous");
            PUBLIC_IDENTIFIERS.add("ResolverConfiguration");
            PUBLIC_IDENTIFIERS.add("ResolverConfiguration$Options");
            PUBLIC_IDENTIFIERS.add("ResolverDirectHTTP");
            PUBLIC_IDENTIFIERS.add("ResolveResult");
            PUBLIC_IDENTIFIERS.add("ResolverFragment");
            PUBLIC_IDENTIFIERS.add("ResolverLocalFilesystem");
            PUBLIC_IDENTIFIERS.add("ResolverXPointer");
            PUBLIC_IDENTIFIERS.add("Resource");
            PUBLIC_IDENTIFIERS.add("ResourceBundle");
            PUBLIC_IDENTIFIERS.add("ResourceBundle$Control");
            PUBLIC_IDENTIFIERS.add("ResourceBundleBasedAdapter");
            PUBLIC_IDENTIFIERS.add("ResourceBundleControlProvider");
            PUBLIC_IDENTIFIERS.add("ResourceBundleEnumeration");
            PUBLIC_IDENTIFIERS.add("ResourceBundleProvider");
            PUBLIC_IDENTIFIERS.add("ResourceDecompressor");
            PUBLIC_IDENTIFIERS.add("ResourceDecompressor$StringsProvider");
            PUBLIC_IDENTIFIERS.add("ResourceDecompressorFactory");
            PUBLIC_IDENTIFIERS.add("ResourceFilter");
            PUBLIC_IDENTIFIERS.add("ResourceIOException");
            PUBLIC_IDENTIFIERS.add("ResourceLocator");
            PUBLIC_IDENTIFIERS.add("ResourceManager");
            PUBLIC_IDENTIFIERS.add("ResourcePool");
            PUBLIC_IDENTIFIERS.add("ResourcePoolBuilder");
            PUBLIC_IDENTIFIERS.add("ResourcePoolEntry");
            PUBLIC_IDENTIFIERS.add("ResourcePoolManager");
            PUBLIC_IDENTIFIERS.add("ResourcePoolManager$ResourcePoolImpl");
            PUBLIC_IDENTIFIERS.add("ResourcePoolModule");
            PUBLIC_IDENTIFIERS.add("ResourcePoolModuleView");
            PUBLIC_IDENTIFIERS.add("ResourcePrevisitor");
            PUBLIC_IDENTIFIERS.add("ResourceRecord");
            PUBLIC_IDENTIFIERS.add("ResourceResolver");
            PUBLIC_IDENTIFIERS.add("ResourceResolverContext");
            PUBLIC_IDENTIFIERS.add("ResourceResolverException");
            PUBLIC_IDENTIFIERS.add("ResourceResolverSpi");
            PUBLIC_IDENTIFIERS.add("Resources");
            PUBLIC_IDENTIFIERS.add("Resources_de");
            PUBLIC_IDENTIFIERS.add("Resources_ja");
            PUBLIC_IDENTIFIERS.add("ResourcesMgr");
            PUBLIC_IDENTIFIERS.add("Resources_zh_CN");
            PUBLIC_IDENTIFIERS.add("ResponseBodyHandlers$FileDownloadBodyHandler");
            PUBLIC_IDENTIFIERS.add("ResponseBodyHandlers$PathBodyHandler");
            PUBLIC_IDENTIFIERS.add("ResponseBodyHandlers$PushPromisesHandlerWithMap");
            PUBLIC_IDENTIFIERS.add("ResponseCache");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$ByteArraySubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$ConsumerSubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$HttpResponseInputStream");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$MappingSubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$NullSubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$PathSubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseSubscribers$TrustedSubscriber");
            PUBLIC_IDENTIFIERS.add("ResponseTimerEvent");
            PUBLIC_IDENTIFIERS.add("Result");
            PUBLIC_IDENTIFIERS.add("ResultContainer");
            PUBLIC_IDENTIFIERS.add("ResultSet");
            PUBLIC_IDENTIFIERS.add("ResultSetMetaData");
            PUBLIC_IDENTIFIERS.add("ResultTypeFinder");
            PUBLIC_IDENTIFIERS.add("RET");
            PUBLIC_IDENTIFIERS.add("RetData");
            PUBLIC_IDENTIFIERS.add("Retention");
            PUBLIC_IDENTIFIERS.add("RetrievalMethod");
            PUBLIC_IDENTIFIERS.add("RetrievalMethodResolver");
            PUBLIC_IDENTIFIERS.add("RETURN");
            PUBLIC_IDENTIFIERS.add("ReturnaddressType");
            PUBLIC_IDENTIFIERS.add("ReturnInstruction");
            PUBLIC_IDENTIFIERS.add("ReturnTaglet");
            PUBLIC_IDENTIFIERS.add("ReturnTree");
            PUBLIC_IDENTIFIERS.add("ReturnType");
            PUBLIC_IDENTIFIERS.add("ReturnTypeEntry");
            PUBLIC_IDENTIFIERS.add("RevalidationHandler");
            PUBLIC_IDENTIFIERS.add("ReverbType");
            PUBLIC_IDENTIFIERS.add("ReverseAxesWalker");
            PUBLIC_IDENTIFIERS.add("ReversePtrs");
            PUBLIC_IDENTIFIERS.add("ReversePtrsAnalysis");
            PUBLIC_IDENTIFIERS.add("RevPtrsTreeNodeAdapter");
            PUBLIC_IDENTIFIERS.add("RFC2253Parser");
            PUBLIC_IDENTIFIERS.add("RFC822Name");
            PUBLIC_IDENTIFIERS.add("RGBColor");
            PUBLIC_IDENTIFIERS.add("RGBImageFilter");
            PUBLIC_IDENTIFIERS.add("RichDiagnosticFormatter");
            PUBLIC_IDENTIFIERS.add("RichDiagnosticFormatter$ClassNameSimplifier");
            PUBLIC_IDENTIFIERS.add("RichDiagnosticFormatter$RichConfiguration");
            PUBLIC_IDENTIFIERS.add("RichDiagnosticFormatter$RichPrinter");
            PUBLIC_IDENTIFIERS.add("RISCV64");
            PUBLIC_IDENTIFIERS.add("RISCV64CurrentFrameGuess");
            PUBLIC_IDENTIFIERS.add("RISCV64Frame");
            PUBLIC_IDENTIFIERS.add("RISCV64HotSpotJVMCIBackendFactory");
            PUBLIC_IDENTIFIERS.add("RISCV64HotSpotRegisterConfig");
            PUBLIC_IDENTIFIERS.add("RISCV64JavaCallWrapper");
            PUBLIC_IDENTIFIERS.add("RISCV64RegisterMap");
            PUBLIC_IDENTIFIERS.add("RISCV64ThreadContext");
            PUBLIC_IDENTIFIERS.add("RMIClassLoader");
            PUBLIC_IDENTIFIERS.add("RMIClassLoaderSpi");
            PUBLIC_IDENTIFIERS.add("RMIClientSocketFactory");
            PUBLIC_IDENTIFIERS.add("RMIConnection");
            PUBLIC_IDENTIFIERS.add("RMIConnectionImpl");
            PUBLIC_IDENTIFIERS.add("RMIConnector");
            PUBLIC_IDENTIFIERS.add("RMIConnectorServer");
            PUBLIC_IDENTIFIERS.add("RMIExporter");
            PUBLIC_IDENTIFIERS.add("RMIFailureHandler");
            PUBLIC_IDENTIFIERS.add("RMIHelper");
            PUBLIC_IDENTIFIERS.add("RMIIIOPServerImpl");
            PUBLIC_IDENTIFIERS.add("RMIJRMPServerImpl");
            PUBLIC_IDENTIFIERS.add("RMISecurityException");
            PUBLIC_IDENTIFIERS.add("RMISecurityManager");
            PUBLIC_IDENTIFIERS.add("RMIServer");
            PUBLIC_IDENTIFIERS.add("RMIServerImpl");
            PUBLIC_IDENTIFIERS.add("RMIServerSocketFactory");
            PUBLIC_IDENTIFIERS.add("RMISocketFactory");
            PUBLIC_IDENTIFIERS.add("rmiURLContext");
            PUBLIC_IDENTIFIERS.add("rmiURLContext$Parser");
            PUBLIC_IDENTIFIERS.add("rmiURLContextFactory");
            PUBLIC_IDENTIFIERS.add("Robot");
            PUBLIC_IDENTIFIERS.add("RobotPeer");
            PUBLIC_IDENTIFIERS.add("RobustOopDeterminator");
            PUBLIC_IDENTIFIERS.add("Role");
            PUBLIC_IDENTIFIERS.add("RoleInfo");
            PUBLIC_IDENTIFIERS.add("RoleInfoNotFoundException");
            PUBLIC_IDENTIFIERS.add("RoleList");
            PUBLIC_IDENTIFIERS.add("RoleNotFoundException");
            PUBLIC_IDENTIFIERS.add("RoleResult");
            PUBLIC_IDENTIFIERS.add("RoleStatus");
            PUBLIC_IDENTIFIERS.add("RoleUnresolved");
            PUBLIC_IDENTIFIERS.add("RoleUnresolvedList");
            PUBLIC_IDENTIFIERS.add("RootNode");
            PUBLIC_IDENTIFIERS.add("RootPaneContainer");
            PUBLIC_IDENTIFIERS.add("RootPaneUI");
            PUBLIC_IDENTIFIERS.add("RootTreeNodeAdapter");
            PUBLIC_IDENTIFIERS.add("RoundEnvironment");
            PUBLIC_IDENTIFIERS.add("RoundRectangle2D");
            PUBLIC_IDENTIFIERS.add("RoundRectangle2D$Double");
            PUBLIC_IDENTIFIERS.add("RoundRectangle2D$Float");
            PUBLIC_IDENTIFIERS.add("Row");
            PUBLIC_IDENTIFIERS.add("RowClosure");
            PUBLIC_IDENTIFIERS.add("RowFilter");
            PUBLIC_IDENTIFIERS.add("RowFilter$Entry");
            PUBLIC_IDENTIFIERS.add("RowId");
            PUBLIC_IDENTIFIERS.add("RowMapper");
            PUBLIC_IDENTIFIERS.add("Rows");
            PUBLIC_IDENTIFIERS.add("RowSet");
            PUBLIC_IDENTIFIERS.add("RowSetEvent");
            PUBLIC_IDENTIFIERS.add("RowSetFactory");
            PUBLIC_IDENTIFIERS.add("RowSetInternal");
            PUBLIC_IDENTIFIERS.add("RowSetListener");
            PUBLIC_IDENTIFIERS.add("RowSetMetaData");
            PUBLIC_IDENTIFIERS.add("RowSetMetaDataImpl");
            PUBLIC_IDENTIFIERS.add("RowSetProvider");
            PUBLIC_IDENTIFIERS.add("RowSetReader");
            PUBLIC_IDENTIFIERS.add("RowSetWarning");
            PUBLIC_IDENTIFIERS.add("RowSetWriter");
            PUBLIC_IDENTIFIERS.add("RowSorter");
            PUBLIC_IDENTIFIERS.add("RowSorter$SortKey");
            PUBLIC_IDENTIFIERS.add("RowSorterEvent");
            PUBLIC_IDENTIFIERS.add("RowSorterListener");
            PUBLIC_IDENTIFIERS.add("RSAKey");
            PUBLIC_IDENTIFIERS.add("RSAKeyFactory");
            PUBLIC_IDENTIFIERS.add("RSAKeyGenParameterSpec");
            PUBLIC_IDENTIFIERS.add("RSAKeyValue");
            PUBLIC_IDENTIFIERS.add("RSAKeyValueResolver");
            PUBLIC_IDENTIFIERS.add("RSAMultiPrimePrivateCrtKey");
            PUBLIC_IDENTIFIERS.add("RSAMultiPrimePrivateCrtKeySpec");
            PUBLIC_IDENTIFIERS.add("RSAOtherPrimeInfo");
            PUBLIC_IDENTIFIERS.add("RSAPrivateCrtKey");
            PUBLIC_IDENTIFIERS.add("RSAPrivateCrtKeySpec");
            PUBLIC_IDENTIFIERS.add("RSAPrivateKey");
            PUBLIC_IDENTIFIERS.add("RSAPrivateKeySpec");
            PUBLIC_IDENTIFIERS.add("RSAPSSSignature");
            PUBLIC_IDENTIFIERS.add("RSAPublicKey");
            PUBLIC_IDENTIFIERS.add("RSAPublicKeySpec");
            PUBLIC_IDENTIFIERS.add("RSAUtil");
            PUBLIC_IDENTIFIERS.add("RTFEditorKit");
            PUBLIC_IDENTIFIERS.add("RTFIterator");
            PUBLIC_IDENTIFIERS.add("RuleBasedBreakIterator");
            PUBLIC_IDENTIFIERS.add("RuleBasedCollator");
            PUBLIC_IDENTIFIERS.add("Runnable");
            PUBLIC_IDENTIFIERS.add("RunnableFuture");
            PUBLIC_IDENTIFIERS.add("RunnableScheduledFuture");
            PUBLIC_IDENTIFIERS.add("Runtime");
            PUBLIC_IDENTIFIERS.add("Runtime1");
            PUBLIC_IDENTIFIERS.add("RuntimeAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeBlob");
            PUBLIC_IDENTIFIERS.add("RuntimeErrorException");
            PUBLIC_IDENTIFIERS.add("RuntimeException");
            PUBLIC_IDENTIFIERS.add("RuntimeInvisibleAnnotations");
            PUBLIC_IDENTIFIERS.add("RuntimeInvisibleAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeInvisibleParameterAnnotations");
            PUBLIC_IDENTIFIERS.add("RuntimeInvisibleParameterAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeInvisibleTypeAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeMBeanException");
            PUBLIC_IDENTIFIERS.add("RuntimeMXBean");
            PUBLIC_IDENTIFIERS.add("RuntimeOperationsException");
            PUBLIC_IDENTIFIERS.add("RuntimeParameterAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimePermission");
            PUBLIC_IDENTIFIERS.add("RuntimeStub");
            PUBLIC_IDENTIFIERS.add("RuntimeTypeAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeUtil$GetInstanceAction");
            PUBLIC_IDENTIFIERS.add("Runtime.Version");
            PUBLIC_IDENTIFIERS.add("RuntimeVisibleAnnotations");
            PUBLIC_IDENTIFIERS.add("RuntimeVisibleAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeVisibleParameterAnnotations");
            PUBLIC_IDENTIFIERS.add("RuntimeVisibleParameterAnnotations_attribute");
            PUBLIC_IDENTIFIERS.add("RuntimeVisibleTypeAnnotations_attribute");
        }
        return PUBLIC_IDENTIFIERS;
    }
}
